import streamlit as st
from streamlit_folium import st_folium
import folium
import geopandas as gpd
import pandas as pd
import requests
import os
from shapely.geometry import Point
from dotenv import load_dotenv

st.set_page_config(layout="wide")


@st.cache_data
def load_data():
    sports = gpd.read_file("data/processed/sport_all.geojson")
    sports = sports[pd.notnull(sports["global_id"])].copy()
    sports["global_id"] = sports["global_id"].astype(int)
    return sports.to_crs("EPSG:4326")


sports = load_data()
load_dotenv()


def draw_map():
    m = folium.Map(location=[55.75, 37.6], zoom_start=11, control_scale=True)
    for _, row in sports.iterrows():
        gid = row["global_id"]
        folium.CircleMarker(
            location=[row.geometry.y, row.geometry.x],
            radius=6,
            color="gray",
            fill=True,
            fill_opacity=0.7,
            popup=folium.Popup(f"ID: {gid}", max_width=200),
            tooltip=f"ID: {gid}"
        ).add_to(m)
    return m


st.title("üß≠ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–ø–æ—Ä—Ç–æ–±—ä–µ–∫—Ç–æ–≤ –ú–æ—Å–∫–≤—ã")
st.markdown("–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —Å–µ—Ä—É—é —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ —ç—Ç–æ—Ç —Å–ø–æ—Ä—Ç–æ–±—ä–µ–∫—Ç –æ–±–µ—Å–ø–µ—á–µ–Ω –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π.")

with st.container():
    map_output = st_folium(draw_map(), width=1000, height=600)

if map_output and map_output.get("last_clicked"):
    clicked = map_output["last_clicked"]
    click_point = Point(clicked["lng"], clicked["lat"])

    st.markdown("---")
    st.subheader("üìç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
    st.info("üîÑ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Å–ø–æ—Ä—Ç–æ–±—ä–µ–∫—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...")

    sports_proj = sports.to_crs("EPSG:3857")
    click_proj = gpd.GeoSeries(
        [click_point], crs="EPSG:4326").to_crs("EPSG:3857")
    sports_proj["dist"] = sports_proj.geometry.distance(click_proj.iloc[0])
    nearest_id = sports_proj.loc[sports_proj["dist"].idxmin(), "global_id"]
    gid = int(nearest_id)

    st.write(f"**ID –±–ª–∏–∂–∞–π—à–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞:** `{gid}`")

    try:
        response = requests.get(
            f"https://app-back-bk00.onrender.com/predict?sport_id={gid}")
        result = response.json()

        if not isinstance(result, dict):
            st.error("‚ùå API –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
        elif "status" not in result:
            st.error("‚ö†Ô∏è –í –æ—Ç–≤–µ—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'status'.")
        else:
            col1, col2 = st.columns([1, 2])

            with col1:
                status_color = {
                    "green": "üü¢ –ó–µ–ª—ë–Ω—ã–π ‚Äî —Ä—è–¥–æ–º –µ—Å—Ç—å –º–µ–¥—É—á—Ä–µ–∂–¥–µ–Ω–∏–µ",
                    "yellow": "üü° –ñ–µ–ª—Ç—ã–π ‚Äî –µ—Å—Ç—å –ø—É—Ç—å —á–µ—Ä–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫—É",
                    "red": "üî¥ –ö—Ä–∞—Å–Ω—ã–π ‚Äî –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω"
                }
                st.markdown("### üèÅ –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:")
                st.markdown(
                    f"**{status_color.get(result['status'], result['status'])}**")

            with col2:
                distances = result.get("distances", {})
                st.markdown("### üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏—è:")
                st.markdown(f"""
                - –î–æ –º–µ–¥—É—á—Ä–µ–∂–¥–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é: `{distances.get('direct', '‚Äì')} –º`  
                - –î–æ –±–ª–∏–∂–∞–π—à–µ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: `{distances.get('to_stop', '‚Äì')} –º`  
                - –û—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–æ –º–µ–¥—É—á—Ä–µ–∂–¥–µ–Ω–∏—è: `{distances.get('via_stop', '‚Äì')} –º`
                """)

            if "paths" in result and result["paths"]:
                st.markdown("### üß© –î–µ—Ç–∞–ª–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤:")
                for path in result["paths"]:
                    st.markdown(
                        f"- `{path['type']}` ‚Äî `{path['distance_m']} –º`")

    except Exception as e:
        st.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: {e}")
